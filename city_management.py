# bot_new/city_management.py
import logging
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
import aiohttp

from utils import save_city, get_user_city
from states import CityUpdate
from keyboards import main_menu_kb, cancel_kb
from config import WEATHER_API_KEY # –ù—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞

router = Router()
logger = logging.getLogger(__name__)


@router.message(StateFilter(None), F.text.lower() == "–º–æ–π –≥–æ—Ä–æ–¥ üèôÔ∏è")
async def handle_my_city(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –≥–æ—Ä–æ–¥".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    city = get_user_city(user_id)

    if city:
        await message.answer(f"üìå –í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: <b>{city}</b>", parse_mode="HTML")
    else:
        await message.answer(
            "üèôÔ∏è –í—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥. "
            "–ù–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.",
            reply_markup=main_menu_kb
        )


@router.message(StateFilter(None), F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ‚úèÔ∏è")
async def handle_change_city_request(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ö–∏–µ–≤</b> –∏–ª–∏ <b>London</b>",
        reply_markup=cancel_kb, # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
        parse_mode="HTML"
    )
    await state.set_state(CityUpdate.waiting_for_city_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(CityUpdate.waiting_for_city_name, F.text)
async def handle_city_name_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ API –ø–æ–≥–æ–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    """
    if not message.text or len(message.text) < 2:
         await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_kb)
         return

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ä–æ–¥...", reply_markup=types.ReplyKeyboardRemove())

    city_name = message.text.strip()
    user_id = message.from_user.id

    if not WEATHER_API_KEY:
        logger.warning(f"–ù–µ—Ç WEATHER_API_KEY. –°–æ—Ö—Ä–∞–Ω—è—é –≥–æ—Ä–æ–¥ '{city_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        save_city(user_id, city_name)
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ <b>{city_name}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"<i>(–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å, —Ç.–∫. –∫–ª—é—á API –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)</i>",
            reply_markup=main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeatherMap API
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city_name,
        'appid': WEATHER_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }
    is_valid_city = False
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    is_valid_city = True
                    # –ú–æ–∂–Ω–æ –¥–∞–∂–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    # data = await response.json()
                    # city_name = data.get('name', city_name) # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª API
                elif response.status == 404:
                    logger.info(f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API –ø–æ–≥–æ–¥—ã.")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã ({response.status}) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name}'.")

    except aiohttp.ClientConnectorError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name}': {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb)
        await state.clear()
        return
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name}': {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_menu_kb)
        await state.clear()
        return

    if is_valid_city:
        save_city(user_id, city_name)
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ <b>{city_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()
    else:
        await message.answer(
            f"‚ùå –ì–æ—Ä–æ–¥ <b>{city_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=cancel_kb, # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
            parse_mode="HTML"
        )
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        # await state.set_state(CityUpdate.waiting_for_city_name) # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@router.message(CityUpdate.waiting_for_city_name)
async def handle_wrong_input_in_city_state(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞ ‚ùå'.",
        reply_markup=cancel_kb
    )