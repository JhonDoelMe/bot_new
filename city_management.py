# bot_new/city_management.py
import logging
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
import aiohttp

from utils import save_city, get_user_city
from states import CityUpdate
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ keyboards
from keyboards import (
    main_menu_kb, cancel_kb,
    kb_my_city_text, kb_change_city_text, kb_cancel_text # –î–æ–±–∞–≤–ª—è–µ–º kb_cancel_text
)
from config import WEATHER_API_KEY

router = Router()
logger = logging.getLogger(__name__)


# –§–∏–ª—å—Ç—Ä –¥–ª—è "–ú–æ–π –≥–æ—Ä–æ–¥"
@router.message(StateFilter(None), F.text == kb_my_city_text)
async def handle_my_city(message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª '{kb_my_city_text}'")
    user_id = message.from_user.id
    city = get_user_city(user_id)
    if city:
        await message.answer(f"üìå –í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: <b>{city}</b>", parse_mode="HTML")
    else:
        await message.answer(
            f"üèôÔ∏è –í—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏—Ç–µ '{kb_change_city_text}', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.",
            reply_markup=main_menu_kb
        )


# –§–∏–ª—å—Ç—Ä –¥–ª—è "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@router.message(StateFilter(None), F.text == kb_change_city_text)
async def handle_change_city_request(message: types.Message, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª '{kb_change_city_text}'")
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É. –ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ö–∏–µ–≤</b> –∏–ª–∏ <b>London</b>\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ '{kb_cancel_text}'",
        reply_markup=cancel_kb,
        parse_mode="HTML"
    )
    await state.set_state(CityUpdate.waiting_for_city_name)


@router.message(CityUpdate.waiting_for_city_name, F.text)
async def handle_city_name_input(message: types.Message, state: FSMContext):
     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == kb_cancel_text: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
         # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ–±—â–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º handle_back_to_main_menu_with_state
         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞.")
         # await state.clear() # –ù–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, –¥–µ–ª–∞–µ—Ç—Å—è –≤ –æ–±—â–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
         # await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
         return # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–¥–µ–ª–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–µ

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: '{message.text}'")

    if not message.text or len(message.text.strip()) < 2:
         await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '{kb_cancel_text}'.", reply_markup=cancel_kb)
         return

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    city_name_input = message.text.strip()
    user_id = message.from_user.id

    if not WEATHER_API_KEY:
        # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.warning(f"–ù–µ—Ç WEATHER_API_KEY. –°–æ—Ö—Ä–∞–Ω—è—é –≥–æ—Ä–æ–¥ '{city_name_input}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        save_city(user_id, city_name_input)
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ <b>{city_name_input}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"<i>(–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å, —Ç.–∫. –∫–ª—é—á API –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)</i>",
            reply_markup=main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()
        return

    checking_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ä–æ–¥...", reply_markup=types.ReplyKeyboardRemove())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeatherMap API
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city_name_input,
        'appid': WEATHER_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }
    is_valid_city = False
    actual_city_name = city_name_input
    try:
        # ... (–±–ª–æ–∫ try/except –¥–ª—è API –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ '{city_name_input}'. –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    actual_city_name = data.get('name', city_name_input) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ API
                    is_valid_city = True
                elif response.status == 404:
                    logger.info(f"–ì–æ—Ä–æ–¥ '{city_name_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API –ø–æ–≥–æ–¥—ã (404).")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã ({response.status}) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name_input}'. –û—Ç–≤–µ—Ç: {await response.text()}")

    except aiohttp.ClientConnectorError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name_input}': {e}")
        await checking_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await state.clear()
        return
    except TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name_input}'.")
        await checking_message.edit_text("‚ùå –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb)
        await state.clear()
        return
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞ '{city_name_input}': {e}", exc_info=True)
        await checking_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_menu_kb)
        await state.clear()
        return

    if is_valid_city:
        # ... (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        save_city(user_id, actual_city_name) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ API
        await checking_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            f"‚úÖ –ì–æ—Ä–æ–¥ <b>{actual_city_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()
    else:
        # ... (–æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        await checking_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            f"‚ùå –ì–æ—Ä–æ–¥ '<b>{city_name_input}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=cancel_kb, # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@router.message(CityUpdate.waiting_for_city_name)
async def handle_wrong_input_in_city_state(message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {message.content_type}")
    await message.answer(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '{kb_cancel_text}'.",
        reply_markup=cancel_kb
    )