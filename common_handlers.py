# bot_new/common_handlers.py
import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ keyboards
from keyboards import (
    main_menu_kb, weather_kb, currency_kb, cancel_kb,
    kb_back_text, kb_cancel_text, kb_weather_text, kb_currency_text,
    kb_my_city_text, kb_change_city_text, kb_alert_text
)


router = Router()
logger = logging.getLogger(__name__)

# –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
main_menu_button_texts = [
    kb_weather_text, kb_currency_text, kb_my_city_text,
    kb_change_city_text, kb_alert_text
]


@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start")
        await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start)")
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb
    )


# –§–∏–ª—å—Ç—Ä –¥–ª—è "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@router.message(StateFilter(None), F.text == kb_back_text)
async def handle_back_to_main_menu_no_state(message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '{kb_back_text}' (–±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)")
    await message.answer(
        "üìã –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb
    )


# –§–∏–ª—å—Ç—Ä –¥–ª—è "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏ "–û—Ç–º–µ–Ω–∞" (–≤–∫–ª—é—á–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.message(F.text.in_({kb_back_text, kb_cancel_text}))
async def handle_back_to_main_menu_with_state(message: types.Message, state: FSMContext):
     # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"–û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∫–Ω–æ–ø–∫–æ–π '{message.text}'")
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_kb # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '{message.text}', –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –±—ã–ª–æ.")
        await message.answer(
            "üìã –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(StateFilter(None))
async def handle_unknown_message(message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –ø–æ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–∞–º) ...
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ StateFilter(None): '{message.text}' –æ—Ç {message.from_user.id}")
    if message.text and message.text in main_menu_button_texts:
        logger.warning(
            f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '{message.text}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª! "
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ handle_unknown_message."
        )
        # await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    elif message.text:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –æ—Ç {message.from_user.id}")
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=main_menu_kb
        )