# bot_new/currency.py
from aiogram import Router, types, F
from aiogram.filters import StateFilter
import aiohttp
import logging
from datetime import datetime

from keyboards import currency_kb # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

router = Router()
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∞–ª—é—Ç
FILTER_CURRENCIES = ["USD", "EUR", "GBP", "PLN"] # –£–±—Ä–∞–ª RUB, —Ç.–∫. –ù–ë–£ –Ω–µ –¥–∞–µ—Ç –µ–≥–æ –∫—É—Ä—Å –∫ –≥—Ä–∏–≤–Ω–µ –Ω–∞–ø—Ä—è–º—É—é —á–∞—Å—Ç–æ
# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä—É–±–ª—å, —Ç–æ –µ–≥–æ –∫—É—Ä—Å –Ω—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–º –∏–ª–∏ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫

@router.message(StateFilter(None), F.text.lower() == "–∫—É—Ä—Å –≤–∞–ª—é—Ç üí∞")
async def handle_currency_request(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å –≤–∞–ª—é—Ç".
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£...", reply_markup=types.ReplyKeyboardRemove())
    await get_currency_rates(message) # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞

async def get_currency_rates(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ API –ù–ë–£ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –í—ã–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã.
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        today = datetime.now().strftime("%Y%m%d")
        url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={today}&json"

        async with aiohttp.ClientSession() as session:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ClientConnectorError
            async with session.get(url, timeout=15) as response:
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –ù–ë–£. –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"API –ù–ë–£ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}: {error_text}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ù–ë–£. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.", reply_markup=currency_kb)
                    return

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç JSON
                try:
                    data = await response.json()
                except aiohttp.ContentTypeError:
                    logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç API –ù–ë–£. –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–ë–£ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=currency_kb)
                    return

                if not data:
                    logger.warning("–û—Ç–≤–µ—Ç API –ù–ë–£ –ø—É—Å—Ç–æ–π.")
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).", reply_markup=currency_kb)
                    return

                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω—É–∂–Ω—ã–º –≤–∞–ª—é—Ç–∞–º
                filtered_data = [item for item in data if item["cc"] in FILTER_CURRENCIES]
                if not filtered_data:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ –ù–ë–£.", reply_markup=currency_kb)
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
                rates_list = []
                for item in sorted(filtered_data, key=lambda x: x['cc']): # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É –≤–∞–ª—é—Ç—ã
                     # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–∏–Ω–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ 1
                    unit_info = f" –∑–∞ {item['exchangedate']}" if 'exchangedate' in item else ""
                    rates_list.append(
                        f"<b>{item['cc']}</b> ({item['txt']}): {item['rate']:.4f} –≥—Ä–Ω" + unit_info
                    )
                rates = "\n".join(rates_list)

                await message.answer(
                    f"üá∫üá¶ –ö—É—Ä—Å –≤–∞–ª—é—Ç –ù–ë–£ –Ω–∞ <b>{datetime.now().strftime('%d.%m.%Y')}</b>:\n\n{rates}",
                    reply_markup=currency_kb,
                    parse_mode="HTML"
                )

    except aiohttp.ClientConnectorError as e:
         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–£: {e}")
         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ù–ë–£. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=currency_kb)
    except TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–£.")
        await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –ù–ë–£ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=currency_kb)
    except Exception as e:
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}") # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫—Ç—Ä–µ–π—Å
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.", reply_markup=currency_kb)