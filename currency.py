from aiogram import Router, types, F
import aiohttp
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥—É–ª—è "–ö—É—Ä—Å –≤–∞–ª—é—Ç"
currency_kb = [
    [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
]

@router.message(F.text.lower() == "–∫—É—Ä—Å –≤–∞–ª—é—Ç")
async def get_currency_rates(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å –≤–∞–ª—é—Ç".
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ API –ù–ë–£ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        today = datetime.now().strftime("%Y%m%d")  # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ API –ù–ë–£
        url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={today}&json"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ù–ë–£.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ JSON
                data = await response.json()
                if not data:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                rates = "\n".join([
                    f"{item['txt']} ({item['cc']}): {item['rate']} –≥—Ä–Ω –∑–∞ {item['unit']} –µ–¥–∏–Ω–∏—Ü"
                    for item in data
                ])

                await message.answer(
                    f"üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{rates}",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=currency_kb,
                        resize_keyboard=True
                    )
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    from main_menu import main_menu_kb  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        "üìã –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=main_menu_kb,
            resize_keyboard=True
        )
    )
