# bot_new/currency.py
import logging
from aiogram import Router, types, F
from aiogram.filters import StateFilter
import aiohttp
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ keyboards
from keyboards import (
    currency_kb, main_menu_kb,
    kb_currency_text
)

router = Router()
logger = logging.getLogger(__name__)

FILTER_CURRENCIES = ["USD", "EUR", "GBP", "PLN"]


# –§–∏–ª—å—Ç—Ä –¥–ª—è "–ö—É—Ä—Å –≤–∞–ª—é—Ç"
@router.message(StateFilter(None), F.text == kb_currency_text)
async def handle_currency_request(message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª '{kb_currency_text}'")
    processing_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£...", reply_markup=types.ReplyKeyboardRemove())
    await get_currency_rates(processing_message)


async def get_currency_rates(processing_message: types.Message):
    # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        today = datetime.now().strftime("%Y%m%d")
        url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={today}&json"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=15) as response:
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –ù–ë–£. –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status != 200:
                    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    error_text = await response.text()
                    logger.error(f"API –ù–ë–£ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}: {error_text}")
                    await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ù–ë–£. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.",
                        reply_markup=main_menu_kb # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    )
                    return

                try:
                    data = await response.json()
                except aiohttp.ContentTypeError:
                     # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç API –ù–ë–£.")
                    await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        "‚ùå –û—à–∏–±–∫–∞: –ù–ë–£ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                        reply_markup=main_menu_kb
                    )
                    return

                if not data:
                     # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    logger.warning("–û—Ç–≤–µ—Ç API –ù–ë–£ –ø—É—Å—Ç–æ–π.")
                    await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).",
                        reply_markup=currency_kb # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∞–ª—é—Ç
                    )
                    return

                filtered_data = [item for item in data if item["cc"] in FILTER_CURRENCIES]
                if not filtered_data:
                    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ –ù–ë–£.",
                        reply_markup=currency_kb
                    )
                    return

                rates_list = []
                date_str = filtered_data[0].get('exchangedate', datetime.now().strftime('%d.%m.%Y'))
                for item in sorted(filtered_data, key=lambda x: x['cc']):
                    rates_list.append(
                        f"<b>{item['cc']}</b> ({item['txt']}): {item['rate']:.4f} –≥—Ä–Ω"
                    )
                rates = "\n".join(rates_list)

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞)
                await processing_message.edit_text(
                    f"üá∫üá¶ –ö—É—Ä—Å –≤–∞–ª—é—Ç –ù–ë–£ –Ω–∞ <b>{date_str}</b>:\n\n{rates}",
                    reply_markup=currency_kb,
                    parse_mode="HTML"
                )

    except aiohttp.ClientConnectorError as e:
         # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–£: {e}")
         await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ù–ë–£. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
             reply_markup=main_menu_kb
         )
    except TimeoutError:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–£.")
        await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            "‚ùå –°–µ—Ä–≤–µ—Ä –ù–ë–£ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb
        )
    except Exception as e:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        await processing_message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.",
            reply_markup=main_menu_kb
        )