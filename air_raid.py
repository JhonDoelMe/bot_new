import requests
import json
import logging
import xml.etree.ElementTree as ET
from io import BytesIO
from PIL import Image
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

BASE_ALERTS_URL = "http://ubilling.net.ua/aerialalerts/"

def get_air_raid_status(region):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.
    """
    try:
        response = requests.get(BASE_ALERTS_URL)
        response.raise_for_status()
        data = response.json()
        if 'states' in data:
            for state_name, state_params in data['states'].items():
                if state_name.lower() == region.lower():
                    if state_params['alertnow']:
                        return "–¢—Ä–∏–≤–æ–≥–∞"
                    else:
                        return "–í—ñ–¥–±—ñ–π"
        else:
            logging.warning("–ö–ª—é—á 'states' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON-–æ—Ç–≤–µ—Ç–µ.")
        return None
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API —Ç—Ä–µ–≤–æ–≥: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –æ—Ç API —Ç—Ä–µ–≤–æ–≥: {e}")
        return None

def format_air_raid_message(region, status):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏.
    """
    if status == "–¢—Ä–∏–≤–æ–≥–∞":
        return f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í —Ä–µ–≥–∏–æ–Ω–µ '{region}' –æ–±—ä—è–≤–ª–µ–Ω–∞ –≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!"
    elif status == "–í—ñ–¥–±—ñ–π":
        return f"‚úÖ –í —Ä–µ–≥–∏–æ–Ω–µ '{region}' –æ—Ç–±–æ–π –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏."
    else:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region}'."

def get_alerts_list_xml():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏–∑ XML.
    """
    try:
        xml_url = "https://ubilling.net.ua/aerialalerts/?xml=true"
        response = requests.get(xml_url)
        response.raise_for_status()
        root = ET.fromstring(response.content)
        alerts_list = "–°—Ç–∞—Ç—É—Å –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –ø–æ –æ–±–ª–∞—Å—Ç—è–º:\n"
        for state in root.findall('state'):
            name_element = state.find('name')
            alert_element = state.find('alertnow')
            if name_element is not None and alert_element is not None:
                name = name_element.text
                alert = alert_element.text == 'true'
                alerts_list += f"- {name}: {'üö® –¢—Ä–∏–≤–æ–≥–∞' if alert else '‚úÖ –í—ñ–¥–±—ñ–π'}\n"
        return alerts_list
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ XML: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π."
    except ET.ParseError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XML: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π."

def get_alerts_map_image():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞).
    """
    try:
        map_url = "https://ubilling.net.ua/aerialalerts/?map=true"
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(map_url)
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç—ã (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
        driver.implicitly_wait(5)
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)
        map_element = driver.find_element("xpath", "//div[@id='map']")  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π XPATH, –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        image_bytes = map_element.screenshot_as_png
        driver.quit()
        return BytesIO(image_bytes)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        return None