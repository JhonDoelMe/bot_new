import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from datetime import datetime
import logging
import aiohttp

from config import BOT_TOKEN, WEATHER_API_KEY
from handlers import router
from utils import load_reminders, load_cities

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
dp.include_router(router)

async def send_morning_reminders(bot: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ 8:00 —É—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    while True:
        now = datetime.now()
        if now.hour == 8 and now.minute == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 8:00
            reminders = load_reminders()
            cities = load_cities()

            for user_id, active in reminders.items():
                if active and str(user_id) in cities:
                    city = cities[str(user_id)]
                    try:
                        async with aiohttp.ClientSession() as session:
                            url = (
                                f"https://api.openweathermap.org/data/2.5/weather?"
                                f"q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
                            )
                            async with session.get(url, timeout=10) as response:
                                data = await response.json()
                                if response.status == 200:
                                    temp = data["main"]["temp"]
                                    description = data["weather"][0]["description"].capitalize()
                                    message = (
                                        f"üå§Ô∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n"
                                        f"–ü–æ–≥–æ–¥–∞ –≤ {city} —Å–µ–≥–æ–¥–Ω—è:\n"
                                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                                        f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
                                    )
                                    await bot.send_message(chat_id=user_id, text=message)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        asyncio.create_task(send_morning_reminders(bot))
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
