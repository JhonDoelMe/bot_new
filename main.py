import telebot
import sqlite3
import configparser
import weather
import currency
import air_raid
from keyboards import create_main_menu, create_weather_preference_keyboard, create_weather_menu, create_exchange_menu, create_alert_menu
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import schedule
import time
import datetime

# --- –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.ini ---
config = configparser.ConfigParser()
config.read('config.ini')
BOT_TOKEN = config['bot']['token']
DATABASE_NAME = "assistant_bot.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
def connect_db():
    conn = sqlite3.connect(DATABASE_NAME)
    return conn, conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç) ---
def create_tables():
    conn, cursor = connect_db()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        preferred_location TEXT,
        preferred_currencies TEXT,
        notifications_enabled INTEGER DEFAULT 0,
        morning_reminder_enabled INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS weather_data (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        location TEXT,
        timestamp TIMESTAMP,
        temperature REAL,
        humidity REAL,
        wind_speed REAL,
        description TEXT,
        raw_data TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS currency_rates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        base_currency TEXT,
        target_currency TEXT,
        rate REAL,
        timestamp TIMESTAMP,
        raw_data TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS air_raid_alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        region TEXT,
        status TEXT,
        timestamp TIMESTAMP,
        raw_data TEXT
    )
    """)
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN morning_reminder_enabled INTEGER DEFAULT 0")
        conn.commit()
        print("–°—Ç–æ–ª–±–µ—Ü morning_reminder_enabled —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError:
        print("–°—Ç–æ–ª–±–µ—Ü morning_reminder_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users.")
    conn.commit()
    conn.close()

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states = {}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ ---
def send_morning_weather_reminder():
    conn, cursor = connect_db()
    cursor.execute("SELECT user_id, preferred_location FROM users WHERE morning_reminder_enabled=1")
    users_with_reminder = cursor.fetchall()
    conn.close()
    for user_id, preferred_location in users_with_reminder:
        if preferred_location:
            try:
                weather_data = weather.get_weather(preferred_location)
                if weather_data:
                    formatted_weather = weather.format_weather_data(weather_data)
                    bot.send_message(user_id, f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ ({preferred_location}):\n\n{formatted_weather}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
schedule.every().day.at("08:00").do(send_morning_weather_reminder)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

import threading
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    preferred_location = result[0] if result else None

    if preferred_location:
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã: {preferred_location}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å?", reply_markup=create_weather_preference_keyboard())
    else:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=create_main_menu())
    conn.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ---
@bot.message_handler(func=lambda message: message.text == "‚úÖ –î–∞, –¥–ª—è –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
def handle_weather_preference_yes(message):
    user_id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    preferred_location = result[0] if result else None
    conn.close()
    if preferred_location:
        try:
            weather_data = weather.get_weather(preferred_location)
            if weather_data:
                formatted_weather = weather.format_weather_data(weather_data)
                bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
            else:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {preferred_location}.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
    else:
        bot.reply_to(message, "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        user_states[user_id] = "waiting_for_city"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ---
@bot.message_handler(func=lambda message: message.text == "‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π")
def handle_weather_preference_no(message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_for_city"
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–≥–æ–¥–∞" ---
@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞")
def handle_weather_button(message):
    user_id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    preferred_location = result[0] if result else None
    conn.close()
    if preferred_location:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_weather_menu())
    else:
        user_states[user_id] = "waiting_for_city"
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç" ---
@bot.message_handler(func=lambda message: message.text == "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def handle_exchange_button(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_exchange_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞" ---
@bot.message_handler(func=lambda message: message.text == "üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞")
def handle_alert_button(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_alert_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" ---
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def handle_back_to_menu(message):
    bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥" ---
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def handle_change_city(message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_for_new_city"
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîî –í–∫–ª/–í—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" ---
@bot.message_handler(func=lambda message: message.text == "üîî –í–∫–ª/–í—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def handle_remind_morning(message):
    user_id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute("SELECT morning_reminder_enabled FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    reminder_enabled = result[0] if result else 0

    new_reminder_status = 1 if reminder_enabled == 0 else 0
    cursor.execute("UPDATE users SET morning_reminder_enabled=? WHERE user_id=?", (new_reminder_status, user_id))
    conn.commit()
    conn.close()

    if new_reminder_status == 1:
        bot.reply_to(message, "–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00.", reply_markup=create_weather_menu())
    else:
        bot.reply_to(message, "–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—ã–∫–ª—é—á–µ–Ω—ã.", reply_markup=create_weather_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑" ---
@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
def handle_refresh_weather(message):
    user_id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    preferred_location = result[0] if result else None
    conn.close()
    if preferred_location:
        try:
            weather_data = weather.get_weather(preferred_location)
            if weather_data:
                formatted_weather = weather.format_weather_data(weather_data)
                bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
            else:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {preferred_location}.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
    else:
        bot.reply_to(message, "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å" ---
@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å")
def handle_refresh_exchange(message):
    try:
        exchange_rates_data = currency.get_exchange_rates()
        if exchange_rates_data is not None and len(exchange_rates_data) > 0:
            formatted_rates = currency.format_exchange_rates(exchange_rates_data)
            bot.reply_to(message, formatted_rates, reply_markup=create_exchange_menu())
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–≤–æ–≥–∏ ---
@bot.message_handler(func=lambda message: True)
def handle_any_message(message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id] == "waiting_for_alert_region":
        region = message.text
        del user_states[user_id]
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–≤–æ–≥—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {region}")
        try:
            alert_status = air_raid.get_air_raid_status(region)
            print(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ air_raid: {alert_status}")
            if alert_status:
                formatted_message = air_raid.format_air_raid_message(region, alert_status)
                print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}")
                bot.reply_to(message, formatted_message, reply_markup=create_alert_menu())
            else:
                print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–≤–æ–≥–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                bot.reply_to(message, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=create_alert_menu())
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–≤–æ–≥–µ –≤ main.py: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–≤–æ–≥–µ.", reply_markup=create_alert_menu())
    elif message.text == "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞":
        handle_weather_button(message)
    elif message.text == "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        handle_exchange_button(message)
    elif message.text == "üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞":
        handle_alert_button(message)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        handle_back_to_menu(message)
    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        handle_change_city(message)
    elif message.text == "üîî –í–∫–ª/–í—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        handle_remind_morning(message)
    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑":
        handle_refresh_weather(message)
    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å":
        handle_refresh_exchange(message)
    elif message.text == "üìÑ –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π":
        alerts_list = air_raid.get_alerts_list_xml()
        bot.reply_to(message, alerts_list, reply_markup=create_alert_menu())
    elif message.text == "üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É":
        map_image = air_raid.get_alerts_map_image()
        if map_image:
            bot.send_photo(message.chat.id, map_image, reply_markup=create_alert_menu())
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É —Ç—Ä–µ–≤–æ–≥.", reply_markup=create_alert_menu())
    elif message.text == "üìç –£–∑–Ω–∞—Ç—å –ø–æ —Ä–µ–≥–∏–æ–Ω—É":
        user_id = message.from_user.id
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:", reply_markup=create_alert_menu())
        user_states[user_id] = "waiting_for_alert_region"
    elif user_id in user_states and user_states[user_id] == "waiting_for_city":
        city = message.text
        del user_states[user_id]
        print(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π city: {type(city)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{city}'")
        try:
            weather_data = weather.get_weather(city)
            if weather_data:
                formatted_weather = weather.format_weather_data(weather_data)
                markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                btn_yes = KeyboardButton("–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                btn_no = KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
                markup.row(btn_yes, btn_no)
                bot.reply_to(message, formatted_weather + "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π?", reply_markup=markup)
                user_states[str(user_id) + "_city_to_save"] = city
                user_states[user_id] = "waiting_for_save_city"
            else:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
    elif user_id in user_states and user_states[user_id] == "waiting_for_save_city":
        if message.text == "–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            city_to_save = user_states.get(str(user_id) + "_city_to_save")
            if city_to_save:
                conn, cursor = connect_db()
                cursor.execute("UPDATE users SET preferred_location=? WHERE user_id=?", (city_to_save, user_id))
                conn.commit()
                conn.close()
                bot.reply_to(message, f"–ì–æ—Ä–æ–¥ {city_to_save} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π.", reply_markup=create_weather_menu())
            else:
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.", reply_markup=create_weather_menu())
        elif message.text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ":
            bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.", reply_markup=create_weather_menu())
        if str(user_id) + "_city_to_save" in user_states:
            del user_states[str(user_id) + "_city_to_save"]
        del user_states[user_id]
    elif user_id in user_states and user_states[user_id] == "waiting_for_new_city":
        city = message.text
        del user_states[user_id]
        conn, cursor = connect_db()
        cursor.execute("UPDATE users SET preferred_location=? WHERE user_id=?", (city, user_id))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}.", reply_markup=create_weather_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather ---
@bot.message_handler(commands=['weather'])
def send_weather_info(message):
    try:
        city = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        weather_data = weather.get_weather(city)
        if weather_data:
            formatted_weather = weather.format_weather_data(weather_data)
            bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
        else:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –î–Ω–µ–ø—Ä")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /weather: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exchange ---
@bot.message_handler(commands=['exchange'])
def send_exchange_rates(message):
    try:
        exchange_rates_data = currency.get_exchange_rates()
        if exchange_rates_data is not None and len(exchange_rates_data) > 0:
            formatted_rates = currency.format_exchange_rates(exchange_rates_data)
            bot.reply_to(message, formatted_rates, reply_markup=create_exchange_menu())
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–£.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /exchange: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alert ---
@bot.message_handler(commands=['alert'])
def send_air_raid_alert(message):
    try:
        region = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        alert_status = air_raid.get_air_raid_status(region)
        if alert_status:
            formatted_message = air_raid.format_air_raid_message(region, alert_status)
            bot.reply_to(message, formatted_message, reply_markup=create_alert_menu())
        else:
            bot.reply_to(message, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /alert –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /alert: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–≤–æ–≥–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    create_tables() # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    bot.polling(none_stop=True)