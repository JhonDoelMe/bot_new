import os
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
import aiohttp
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –∏ WEATHER_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
weather_kb = [
    [types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞")],
    [types.KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
    [types.KeyboardButton(text="–ö–∏–µ–≤")]
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
def get_wind_direction(degrees):
    if 337.5 <= degrees <= 360 or 0 <= degrees < 22.5:
        return "‚¨ÜÔ∏è –°–µ–≤–µ—Ä"
    elif 22.5 <= degrees < 67.5:
        return "‚ÜóÔ∏è –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫"
    elif 67.5 <= degrees < 112.5:
        return "‚û°Ô∏è –í–æ—Å—Ç–æ–∫"
    elif 112.5 <= degrees < 157.5:
        return "‚ÜòÔ∏è –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫"
    elif 157.5 <= degrees < 202.5:
        return "‚¨áÔ∏è –Æ–≥"
    elif 202.5 <= degrees < 247.5:
        return "‚ÜôÔ∏è –Æ–≥–æ-–∑–∞–ø–∞–¥"
    elif 247.5 <= degrees < 292.5:
        return "‚¨ÖÔ∏è –ó–∞–ø–∞–¥"
    elif 292.5 <= degrees < 337.5:
        return "‚ÜñÔ∏è –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"üå§Ô∏è –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=weather_kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≥–æ–¥—ã
@dp.message()
async def get_weather(message: types.Message):
    city = message.text.strip()
    if not city.isprintable():
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return

    try:
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        async with aiohttp.ClientSession() as session:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url, timeout=10) as response:
                if response.status != 200:
                    data = await response.json()
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                    return

                data = await response.json()

                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                wind_deg = data["wind"].get("deg", 0)
                description = data["weather"][0]["description"].capitalize()
                sunrise = datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M")
                sunset = datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M")

                wind_direction = get_wind_direction(wind_deg)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
                await message.answer(
                    f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {hbold(city)}:\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_direction} {wind_speed} –º/—Å\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥: üåÖ {sunrise}\n"
                    f"üåá –ó–∞–∫–∞—Ç: üåá {sunset}\n"
                    f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
                )

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        async with session.get(forecast_url, timeout=10) as forecast_response:
            if forecast_response.status != 200:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
                return

            forecast_data = await forecast_response.json()
            tomorrow = datetime.now() + timedelta(days=1)
            tomorrow_date = tomorrow.strftime("%Y-%m-%d")

            # –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            for item in forecast_data["list"]:
                forecast_time = item["dt_txt"].split()[0]
                if forecast_time == tomorrow_date:
                    temp_tomorrow = item["main"]["temp"]
                    feels_like_tomorrow = item["main"]["feels_like"]
                    description_tomorrow = item["weather"][0]["description"].capitalize()
                    break
            else:
                await message.answer("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            await message.answer(
                f" –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date}):\n\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_tomorrow}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like_tomorrow}¬∞C)\n"
                f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description_tomorrow}"
            )

    except asyncio.TimeoutError:
        await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())