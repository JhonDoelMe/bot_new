import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
import aiohttp
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –∏ WEATHER_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
CITIES_FILE = "cities.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_cities():
    if not os.path.exists(CITIES_FILE):
        with open(CITIES_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False)
    with open(CITIES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_city(user_id, city):
    cities = load_cities()
    cities[str(user_id)] = city
    with open(CITIES_FILE, "w", encoding="utf-8") as f:
        json.dump(cities, f, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
def get_wind_direction(degrees):
    if 337.5 <= degrees <= 360 or 0 <= degrees < 22.5:
        return "‚¨ÜÔ∏è –°–µ–≤–µ—Ä"
    elif 22.5 <= degrees < 67.5:
        return "‚ÜóÔ∏è –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫"
    elif 67.5 <= degrees < 112.5:
        return "‚û°Ô∏è –í–æ—Å—Ç–æ–∫"
    elif 112.5 <= degrees < 157.5:
        return "‚ÜòÔ∏è –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫"
    elif 157.5 <= degrees < 202.5:
        return "‚¨áÔ∏è –Æ–≥"
    elif 202.5 <= degrees < 247.5:
        return "‚ÜôÔ∏è –Æ–≥–æ-–∑–∞–ø–∞–¥"
    elif 247.5 <= degrees < 292.5:
        return "‚¨ÖÔ∏è –ó–∞–ø–∞–¥"
    elif 292.5 <= degrees < 337.5:
        return "‚ÜñÔ∏è –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = [
    [types.KeyboardButton(text="–ú–æ–π –≥–æ—Ä–æ–¥")],
    [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")]
]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cities = load_cities()

    if str(user_id) not in cities:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=main_kb,
                resize_keyboard=True
            )
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(Text)
async def process_city_input(message: types.Message):
    user_id = message.from_user.id
    city = message.text.strip()

    if not city.isprintable():
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ API
    async with aiohttp.ClientSession() as session:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        async with session.get(url, timeout=10) as response:
            if response.status != 200:
                data = await response.json()
                error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    save_city(user_id, city)
    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=main_kb,
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –≥–æ—Ä–æ–¥"
@dp.message(Text("–ú–æ–π –≥–æ—Ä–æ–¥"))
async def my_city_weather(message: types.Message):
    user_id = message.from_user.id
    cities = load_cities()

    if str(user_id) not in cities:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    city = cities[str(user_id)]

    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url, timeout=10) as response:
                if response.status != 200:
                    data = await response.json()
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                    return

                data = await response.json()

                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                wind_deg = data["wind"].get("deg", 0)
                description = data["weather"][0]["description"].capitalize()
                sunrise = datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M")
                sunset = datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M")

                wind_direction = get_wind_direction(wind_deg)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
                await message.answer(
                    f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {hbold(city)}:\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_direction} {wind_speed} –º/—Å\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥: üåÖ {sunrise}\n"
                    f"üåá –ó–∞–∫–∞—Ç: üåá {sunset}\n"
                    f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@dp.message(Text("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
async def change_city(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())