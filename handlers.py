from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
import aiohttp
from config import WEATHER_API_KEY
from utils import load_cities, save_city, get_wind_direction

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = [
    [types.KeyboardButton(text="–ú–æ–π –≥–æ—Ä–æ–¥")],
    [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")]
]

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cities = load_cities()

    if str(user_id) not in cities:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=main_kb,
                resize_keyboard=True
            )
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(F.text)
async def process_city_input(message: types.Message):
    user_id = message.from_user.id
    city = message.text.strip()

    if not city.isprintable():
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ API
    async with aiohttp.ClientSession() as session:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        async with session.get(url, timeout=10) as response:
            if response.status != 200:
                data = await response.json()
                error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    save_city(user_id, city)
    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=main_kb,
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –≥–æ—Ä–æ–¥"
@router.message(F.text == "–ú–æ–π –≥–æ—Ä–æ–¥")
async def my_city_weather(message: types.Message):
    user_id = message.from_user.id
    cities = load_cities()

    if str(user_id) not in cities:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    city = cities[str(user_id)]

    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url, timeout=10) as response:
                if response.status != 200:
                    data = await response.json()
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                    return

                data = await response.json()

                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                wind_deg = data["wind"].get("deg", 0)
                description = data["weather"][0]["description"].capitalize()
                sunrise = datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M")
                sunset = datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M")

                wind_direction = get_wind_direction(wind_deg)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
                await message.answer(
                    f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {hbold(city)}:\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_direction} {wind_speed} –º/—Å\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥: üåÖ {sunrise}\n"
                    f"üåá –ó–∞–∫–∞—Ç: üåá {sunset}\n"
                    f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
                )

    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )