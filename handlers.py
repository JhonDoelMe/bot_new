from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
import aiohttp
from datetime import datetime, timedelta
import logging

from config import WEATHER_API_KEY
from utils import load_cities, save_city, get_wind_direction, load_reminders, save_reminder

logger = logging.getLogger(__name__)

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥—É–ª—è "–ü–æ–≥–æ–¥–∞"
weather_kb = [
    [types.KeyboardButton(text="–ú–æ–π –≥–æ—Ä–æ–¥")],
    [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")],
    [types.KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å —É—Ç—Ä–æ–º")],
    [types.KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
]

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,
    –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–æ–¥—É–ª–µ "–ü–æ–≥–æ–¥–∞".
    """
    user_id = str(message.from_user.id)
    cities = load_cities()

    if user_id not in cities:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=weather_kb,
                resize_keyboard=True
            )
        )

@router.message(F.text.lower() == "–º–æ–π –≥–æ—Ä–æ–¥")
async def my_city_weather(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –≥–æ—Ä–æ–¥".
    –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    user_id = str(message.from_user.id)
    cities = load_cities()

    if user_id not in cities:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    city = cities[user_id]
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: '{city}'")

    try:
        async with aiohttp.ClientSession() as session:
            current_weather_url = (
                f"https://api.openweathermap.org/data/2.5/weather?"
                f"q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            )
            forecast_url = (
                f"https://api.openweathermap.org/data/2.5/forecast?"
                f"q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            )

            async with session.get(current_weather_url, timeout=10) as current_response, \
                       session.get(forecast_url, timeout=10) as forecast_response:

                current_data = await current_response.json()
                forecast_data = await forecast_response.json()

                if current_response.status != 200:
                    error_message = current_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
                    return

                if forecast_response.status != 200:
                    error_message = forecast_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {error_message}")
                    return

                temp = current_data["main"]["temp"]
                feels_like = current_data["main"]["feels_like"]
                humidity = current_data["main"]["humidity"]
                wind_speed = current_data["wind"]["speed"]
                wind_deg = current_data["wind"].get("deg", 0)
                description = current_data["weather"][0]["description"].capitalize()
                sunrise = datetime.fromtimestamp(current_data["sys"]["sunrise"]).strftime("%H:%M")
                sunset = datetime.fromtimestamp(current_data["sys"]["sunset"]).strftime("%H:%M")

                wind_direction = get_wind_direction(wind_deg)

                await message.answer(
                    f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {hbold(city)} —Å–µ–≥–æ–¥–Ω—è:\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_direction} {wind_speed} –º/—Å\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                    f"üåá –ó–∞–∫–∞—Ç: {sunset}\n"
                    f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
                )

                tomorrow_data = None
                today = datetime.now().date()
                for forecast in forecast_data["list"]:
                    forecast_time = datetime.fromtimestamp(forecast["dt"])
                    if forecast_time.date() == today + timedelta(days=1) and forecast_time.hour == 12:
                        tomorrow_data = forecast
                        break

                if tomorrow_data:
                    temp_tomorrow = tomorrow_data["main"]["temp"]
                    feels_like_tomorrow = tomorrow_data["main"]["feels_like"]
                    humidity_tomorrow = tomorrow_data["main"]["humidity"]
                    wind_speed_tomorrow = tomorrow_data["wind"]["speed"]
                    wind_deg_tomorrow = tomorrow_data["wind"].get("deg", 0)
                    description_tomorrow = tomorrow_data["weather"][0]["description"].capitalize()

                    wind_direction_tomorrow = get_wind_direction(wind_deg_tomorrow)

                    await message.answer(
                        f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {hbold(city)} –∑–∞–≤—Ç—Ä–∞ (–≤—Ä–µ–º—è: 12:00):\n\n"
                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_tomorrow}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like_tomorrow}¬∞C)\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity_tomorrow}%\n"
                        f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_direction_tomorrow} {wind_speed_tomorrow} –º/—Å\n"
                        f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description_tomorrow}"
                    )
                else:
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
