from telebot import TeleBot
from keyboards import create_weather_preference_keyboard, create_weather_menu
import weather
from db_utils import connect_db

def setup_weather_handlers(bot: TeleBot):
    @bot.message_handler(func=lambda message: message.text == "‚úÖ –î–∞, –¥–ª—è –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
    def handle_weather_preference_yes(message):
        user_id = message.from_user.id
        conn, cursor = connect_db()
        cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        preferred_location = result[0] if result else None
        conn.close()
        if preferred_location:
            try:
                weather_data = weather.get_weather(preferred_location)
                if weather_data:
                    formatted_weather = weather.format_weather_data(weather_data)
                    bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
                else:
                    bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {preferred_location}.")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
        else:
            bot.reply_to(message, "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            from core_handlers import user_states
            user_states[user_id] = "waiting_for_city"

    @bot.message_handler(func=lambda message: message.text == "‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π")
    def handle_weather_preference_no(message):
        user_id = message.from_user.id
        from core_handlers import user_states
        user_states[user_id] = "waiting_for_city"
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

    @bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞")
    def handle_weather_button(message):
        user_id = message.from_user.id
        conn, cursor = connect_db()
        cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        preferred_location = result[0] if result else None
        conn.close()
        if preferred_location:
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_weather_menu())
        else:
            from core_handlers import user_states
            user_states[user_id] = "waiting_for_city"
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")

    @bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
    def handle_change_city(message):
        user_id = message.from_user.id
        from core_handlers import user_states
        user_states[user_id] = "waiting_for_new_city"
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")

    @bot.message_handler(func=lambda message: message.text == "üîî –í–∫–ª/–í—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    def handle_remind_morning(message):
        user_id = message.from_user.id
        conn, cursor = connect_db()
        cursor.execute("SELECT morning_reminder_enabled FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        reminder_enabled = result[0] if result else 0

        new_reminder_status = 1 if reminder_enabled == 0 else 0
        cursor.execute("UPDATE users SET morning_reminder_enabled=? WHERE user_id=?", (new_reminder_status, user_id))
        conn.commit()
        conn.close()

        if new_reminder_status == 1:
            bot.reply_to(message, "–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00.", reply_markup=create_weather_menu())
        else:
            bot.reply_to(message, "–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—ã–∫–ª—é—á–µ–Ω—ã.", reply_markup=create_weather_menu())

    @bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    def handle_refresh_weather(message):
        user_id = message.from_user.id
        conn, cursor = connect_db()
        cursor.execute("SELECT preferred_location FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        preferred_location = result[0] if result else None
        conn.close()
        if preferred_location:
            try:
                weather_data = weather.get_weather(preferred_location)
                if weather_data:
                    formatted_weather = weather.format_weather_data(weather_data)
                    bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
                else:
                    bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {preferred_location}.")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
        else:
            bot.reply_to(message, "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

    @bot.message_handler(commands=['weather'])
    def send_weather_info(message):
        try:
            city = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            weather_data = weather.get_weather(city)
            if weather_data:
                formatted_weather = weather.format_weather_data(weather_data)
                bot.reply_to(message, formatted_weather, reply_markup=create_weather_menu())
            else:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
        except IndexError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –î–Ω–µ–ø—Ä")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /weather: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")

def handle_any_message_weather(bot: TeleBot, message):
    user_id = message.from_user.id
    city = message.text
    from core_handlers import user_states
    del user_states[user_id]
    print(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π city: {type(city)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{city}'")
    try:
        weather_data = weather.get_weather(city)
        if weather_data:
            formatted_weather = weather.format_weather_data(weather_data)
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btn_yes = KeyboardButton("–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            btn_no = KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
            markup.row(btn_yes, btn_no)
            bot.reply_to(message, formatted_weather + "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π?", reply_markup=markup)
            user_states[str(user_id) + "_city_to_save"] = city
            user_states[user_id] = "waiting_for_save_city"
        else:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")

def handle_any_message_save_city(bot: TeleBot, message, user_states):
    user_id = message.from_user.id
    if message.text == "–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        city_to_save = user_states.get(str(user_id) + "_city_to_save")
        if city_to_save:
            conn, cursor = connect_db()
            cursor.execute("UPDATE users SET preferred_location=? WHERE user_id=?", (city_to_save, user_id))
            conn.commit()
            conn.close()
            bot.reply_to(message, f"–ì–æ—Ä–æ–¥ {city_to_save} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π.", reply_markup=create_weather_menu())
        else:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.", reply_markup=create_weather_menu())
    elif message.text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ":
        bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.", reply_markup=create_weather_menu())
    if str(user_id) + "_city_to_save" in user_states:
        del user_states[str(user_id) + "_city_to_save"]
    del user_states[user_id]

def handle_any_message_new_city(bot: TeleBot, message):
    user_id = message.from_user.id
    city = message.text
    from core_handlers import user_states
    del user_states[user_id]
    conn, cursor = connect_db()
    cursor.execute("UPDATE users SET preferred_location=? WHERE user_id=?", (city, user_id))
    conn.commit()
    conn.close()
    bot.reply_to(message, f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}.", reply_markup=create_weather_menu())